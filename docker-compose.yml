services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
      
  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongo-proton:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongo-proton

  mongo-proton:
    image: mongo:latest
    container_name: proton_mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: protondb
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_proton_data:/data/db

  proton:
    build:
      context: ./src/protondb-community-api
    container_name: proton
    environment:
      DB_URI: mongodb://admin:password@mongo-proton:27017/protondb?authSource=admin
      PORT: "3000"
    ports:
      - "3000:3000"
    depends_on:
      - mongo-proton
    dns:
      - 8.8.8.8
      - 1.1.1.1

  proton_script:
      build:
        context: ./src/Protondb
      container_name: proton_fetcher
      depends_on:
        - proton
      volumes:
        - .:/app
        - ./data:/data 
      ports:
        - "8082:8082"

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "8080:8080"

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    ports:
      - "4000:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    volumes:
      - ./data:/data  # Mount for reading/writing delta tables
    depends_on:
      - spark-master

  twitch-writer:
    build:
      context: ./src/Twitch
    container_name: twitch-writer
    depends_on:
      - spark-master
      - spark-worker
    volumes:
      - ./data:/data
    environment:
      - TWITCH_FETCH_INTERVAL=300  # or any other env vars you use
    command: ["python", "TwitchDataLoader.py"]

  steam-writer:
    build:
      context: ./src/Steam
    container_name: steam-writer
    depends_on:
      - spark-master
      - spark-worker
    volumes:
      - ./data:/data
    command: ["python", "SteamDataLoader.py"]

  youtube-writer:
    build:
      context: ./src/Youtube
    container_name: youtube-writer
    depends_on:
      - spark-master
      - spark-worker
    volumes:
      - ./data:/data
      - ./landing_zone:/landing_zone 
    env_file:
      - .env
    command: ["python", "YoutubeDataLoader.py"]

  comment-generator:
    build:
      context: ./src/Protondb/ProtondbCommentGenerator
    container_name: comment_generator
    volumes:
      - ./data:/data
    command: ["python", "ProtondbCommentGenerator.py"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]


  mongo-trusted:
    image: mongo:latest
    container_name: mongo_trusted
    restart: always
    ports:
      - "27117:27017"
    volumes:
      - ./data/trusted_zone/mongodb:/data/db

  influx-trusted:
    image: influxdb:2.7
    container_name: influx_trusted
    restart: always
    ports:
      - "8087:8086"
    volumes:
      - ./data/trusted_zone/influxdb:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=steamorg
      - DOCKER_INFLUXDB_INIT_BUCKET=steammetrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=admintoken

  duckdb-loader:
    build:
      context: ./src/DuckDB
    container_name: duckdb_loader
    volumes:
      - ./data:/data
    command: ["python", "duckdb_loader.py"]
    depends_on:
      - spark-master

  mongo-loader:
    build:
      context: ./src/MongoLoader
    container_name: mongo_loader
    volumes:
      - ./data:/data
    command: ["python", "mongo_loader.py"]
    depends_on:
      - mongo-trusted
      - spark-master
      - steam-writer

  influx-loader:
    build:
      context: ./src/InfluxLoader
    container_name: influx_loader
    volumes:
      - ./data:/data
    command: ["python", "influx_loader.py"]
    depends_on:
      - influx-trusted
      - spark-master
      - twitch-writer

volumes:
  mongo_proton_data: {}
